// <auto-generated />
using System;
using AuctionSystem.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuctionSystem.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240625135522_InitialMigrationWithSeedData")]
    partial class InitialMigrationWithSeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AuctionSystem.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0a2830ef-8be3-4ef6-910b-33b680d659d3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c37f9e70-f9ff-4e55-8c95-83ce9708cef7",
                            Email = "stanislav@abv.bg",
                            EmailConfirmed = false,
                            Enable = true,
                            FirstName = "Stanislav",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "STANISLAV@ABV.BG",
                            NormalizedUserName = "STANISLAV@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEKWMFkl7AX/tLiH5YsPsX3Dq/tpWz3nWir4Z3EZlGvPetA4BnxbplEiAgbvgoFmNyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9e406138-c088-4d10-810a-8cb287aa339b",
                            TwoFactorEnabled = false,
                            UserName = "stanislav@abv.bg"
                        },
                        new
                        {
                            Id = "0e136956-3e82-4e00-8f60-b274cdf40833",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e105f213-ede3-4a80-842f-3c9dc11968f3",
                            Email = "petq@abv.bg",
                            EmailConfirmed = false,
                            Enable = true,
                            FirstName = "Petq",
                            LastName = "Ivanova",
                            LockoutEnabled = false,
                            NormalizedEmail = "PETQ@ABV.BG",
                            NormalizedUserName = "PETQ@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEA6z9dwlBH7tWOjytCxnRXyppvEkLyGpZe8kgTLmsSO42yDBQrsJcX4A5LG0ipmkvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ddfff353-d2cc-4d0c-a9cd-c40f2914296b",
                            TwoFactorEnabled = false,
                            UserName = "petq@abv.bg"
                        },
                        new
                        {
                            Id = "cd87d0e2-4047-473e-924a-3e10406c5583",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ddd19b43-78e7-4f76-ada7-a863c26dda43",
                            Email = "pesho@abv.bg",
                            EmailConfirmed = false,
                            Enable = true,
                            FirstName = "Pesho",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "PESHO@ABV.BG",
                            NormalizedUserName = "PESHO@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEI3Z0d7r2sGUdrya083s+YIwZL3gNHejHgWhjXmQNjNLr8k76kX/0rtfK6WclL10aQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eccde9ba-4a3c-4bc1-9bee-3a8988b80b6f",
                            TwoFactorEnabled = false,
                            UserName = "pesho@abv.bg"
                        },
                        new
                        {
                            Id = "70280028-a1a0-4b5e-89d8-b4e65cbae8d8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec2261ab-a653-4698-bbf8-03187c3e1877",
                            Email = "teodor@abv.bg",
                            EmailConfirmed = false,
                            Enable = true,
                            FirstName = "Teodor",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEODOR@ABV.BG",
                            NormalizedUserName = "TEODOR@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEMMvPmUxbEXmTzVVI3EVFNy2fXTYx/wYItqlFu70sMGcbHmXYNTsj2yXh37gHAe0Wg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d258ec24-1129-4a44-84b4-4597aecc18e9",
                            TwoFactorEnabled = false,
                            UserName = "teodor@abv.bg"
                        });
                });

            modelBuilder.Entity("AuctionSystem.Infrastructure.Data.Models.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Auction Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BiddingCount")
                        .HasColumnType("int")
                        .HasComment("Bidding Count");

                    b.Property<int>("BiddingPeriodInDays")
                        .HasColumnType("int")
                        .HasComment("Auction Bidding Period In Days");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int")
                        .HasComment("Auction Condition Identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Auction Description");

                    b.Property<decimal>("InitialPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Auction Initial Price");

                    b.Property<string>("LastBuyerId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Auction Last Buyer Identifier");

                    b.Property<decimal>("LastPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Auction Last Price");

                    b.Property<int>("MinBiddingStep")
                        .HasColumnType("int")
                        .HasComment("Auction Min Bidding Step");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Auction Name");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Auction Seller Identifier");

                    b.Property<DateTime>("StartingAuctionDateTime")
                        .HasColumnType("datetime2")
                        .HasComment("Starting Date And Time Of Auction");

                    b.HasKey("Id");

                    b.HasIndex("ConditionId");

                    b.HasIndex("LastBuyerId");

                    b.HasIndex("SellerId");

                    b.ToTable("Auctions");

                    b.HasComment("Auction table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BiddingCount = 1,
                            BiddingPeriodInDays = 5,
                            ConditionId = 5,
                            Description = "Mercedes C200 2018 car for sale with a starting price of 12,000lv and a minimum bid of BGN 100.On actual kilometers without any remarks.",
                            InitialPrice = 12000m,
                            LastBuyerId = "70280028-a1a0-4b5e-89d8-b4e65cbae8d8",
                            LastPrice = 20000m,
                            MinBiddingStep = 100,
                            Name = "Car auction",
                            SellerId = "cd87d0e2-4047-473e-924a-3e10406c5583",
                            StartingAuctionDateTime = new DateTime(2024, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AuctionSystem.Infrastructure.Data.Models.AuctionComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Auction Comment Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuctionId")
                        .HasColumnType("int")
                        .HasComment("Auction Identifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User Identifier");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId");

                    b.ToTable("AuctionComments");

                    b.HasComment("Auction Comment Table");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            AuctionId = 1,
                            Content = "Very good car",
                            UserId = "cd87d0e2-4047-473e-924a-3e10406c5583"
                        });
                });

            modelBuilder.Entity("AuctionSystem.Infrastructure.Data.Models.AuctionCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Condition Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Auction Condition Name");

                    b.HasKey("Id");

                    b.ToTable("AuctionConditions");

                    b.HasComment("Auction Condition table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Unregistered"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Awaiting approval"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Refused"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Finished"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Terminated"
                        });
                });

            modelBuilder.Entity("AuctionSystem.Infrastructure.Data.Models.AuctionImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Image Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuctionId")
                        .HasColumnType("int")
                        .HasComment("Auction Identifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Image Url");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit")
                        .HasComment("Is Main Image");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.ToTable("AuctionImages");

                    b.HasComment("Auction Image Table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuctionId = 1,
                            ImageUrl = "https://carsguide.ikman.lk/wp-content/uploads/2023/11/C200-scaled.jpg",
                            IsMain = true
                        },
                        new
                        {
                            Id = 2,
                            AuctionId = 1,
                            ImageUrl = "https://res.cloudinary.com/driveau/image/upload/v1616453173/cms/uploads/2018-mercedes-benz-c200-508.jpg",
                            IsMain = false
                        },
                        new
                        {
                            Id = 3,
                            AuctionId = 1,
                            ImageUrl = "https://www.autocar.co.uk/sites/autocar.co.uk/files/images/car-reviews/first-drives/legacy/15-mercedes-benz-c200-2018-review-static-rear.jpg",
                            IsMain = false
                        });
                });

            modelBuilder.Entity("AuctionSystem.Infrastructure.Data.Models.Bidding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Bidding Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuctionId")
                        .HasColumnType("int")
                        .HasComment("Auction Identifier");

                    b.Property<string>("BuyerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Buyer Identifier");

                    b.Property<DateTime>("DateAndTimeOfBidding")
                        .HasColumnType("datetime2")
                        .HasComment("Date And Time Of Bidding");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Bidding Price");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("BuyerId");

                    b.ToTable("Biddings");

                    b.HasComment("Bidding Table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuctionId = 1,
                            BuyerId = "70280028-a1a0-4b5e-89d8-b4e65cbae8d8",
                            DateAndTimeOfBidding = new DateTime(2024, 5, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 20000m
                        });
                });

            modelBuilder.Entity("AuctionSystem.Infrastructure.Data.Models.UserComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("User Comment Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("ReceivingCommentUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Receiving Comment User Identifier");

                    b.Property<string>("SendingCommentUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Sending Comment User Identifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceivingCommentUserId");

                    b.HasIndex("SendingCommentUserId");

                    b.ToTable("UserComments");

                    b.HasComment("User Comment Table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "The best customer",
                            ReceivingCommentUserId = "cd87d0e2-4047-473e-924a-3e10406c5583",
                            SendingCommentUserId = "70280028-a1a0-4b5e-89d8-b4e65cbae8d8"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9e42b0be-39c7-48bd-883b-10726fbd7573",
                            ConcurrencyStamp = "1dc1ba21-620d-4e97-a08a-535d97a9612f",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "346e1559-a879-404e-8555-4708cda20f06",
                            ConcurrencyStamp = "02672c13-8fc0-4f95-a0d6-2762a47062c1",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "e870b2a7-d550-4201-a4d6-a40bd996790a",
                            ConcurrencyStamp = "d37fb5f1-1c80-4fa2-bafe-e09185bf377a",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "cd87d0e2-4047-473e-924a-3e10406c5583",
                            RoleId = "9e42b0be-39c7-48bd-883b-10726fbd7573"
                        },
                        new
                        {
                            UserId = "70280028-a1a0-4b5e-89d8-b4e65cbae8d8",
                            RoleId = "9e42b0be-39c7-48bd-883b-10726fbd7573"
                        },
                        new
                        {
                            UserId = "0e136956-3e82-4e00-8f60-b274cdf40833",
                            RoleId = "346e1559-a879-404e-8555-4708cda20f06"
                        },
                        new
                        {
                            UserId = "0a2830ef-8be3-4ef6-910b-33b680d659d3",
                            RoleId = "e870b2a7-d550-4201-a4d6-a40bd996790a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AuctionSystem.Infrastructure.Data.Models.Auction", b =>
                {
                    b.HasOne("AuctionSystem.Infrastructure.Data.Models.AuctionCondition", "Condition")
                        .WithMany("Auctions")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuctionSystem.Infrastructure.Data.Models.ApplicationUser", "LastBuyer")
                        .WithMany()
                        .HasForeignKey("LastBuyerId");

                    b.HasOne("AuctionSystem.Infrastructure.Data.Models.ApplicationUser", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");

                    b.Navigation("LastBuyer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("AuctionSystem.Infrastructure.Data.Models.AuctionComment", b =>
                {
                    b.HasOne("AuctionSystem.Infrastructure.Data.Models.Auction", "Auction")
                        .WithMany("Comments")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuctionSystem.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuctionSystem.Infrastructure.Data.Models.AuctionImage", b =>
                {
                    b.HasOne("AuctionSystem.Infrastructure.Data.Models.Auction", "Auction")
                        .WithMany("Images")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auction");
                });

            modelBuilder.Entity("AuctionSystem.Infrastructure.Data.Models.Bidding", b =>
                {
                    b.HasOne("AuctionSystem.Infrastructure.Data.Models.Auction", "Auction")
                        .WithMany("Biddings")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuctionSystem.Infrastructure.Data.Models.ApplicationUser", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("AuctionSystem.Infrastructure.Data.Models.UserComment", b =>
                {
                    b.HasOne("AuctionSystem.Infrastructure.Data.Models.ApplicationUser", "User2")
                        .WithMany()
                        .HasForeignKey("ReceivingCommentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuctionSystem.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("SendingCommentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AuctionSystem.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AuctionSystem.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuctionSystem.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AuctionSystem.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuctionSystem.Infrastructure.Data.Models.Auction", b =>
                {
                    b.Navigation("Biddings");

                    b.Navigation("Comments");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("AuctionSystem.Infrastructure.Data.Models.AuctionCondition", b =>
                {
                    b.Navigation("Auctions");
                });
#pragma warning restore 612, 618
        }
    }
}
